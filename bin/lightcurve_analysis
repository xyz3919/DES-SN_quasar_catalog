#!/usr/bin/env python
# 
import timeit
import numpy as np
from period_analysis import main
import multiprocessing as mp
import useful_funcs
import traceback

def task(quasar):

    try:
        start = timeit.default_timer()
        analysis = main.analysis()
        analysis.large_mock = True
        analysis.analyze_lightcurve(quasar)
        analysis.plot_periodogram_and_lightcurve(quasar)
        analysis.generate_ACF_results(quasar)
        stop = timeit.default_timer()
        useful_funcs.print_and_write("log_period_analysis",quasar["name"]+\
                                 " is finished ("+str((stop-start)/60.)+" mins)")
    except Exception as e:
        traceback.print_exc()
        print quasar
        raise e

    return 0


if __name__ == '__main__':

    start = timeit.default_timer()
    analysis = main.analysis()
    quasar_catalog = analysis.read_quasar_catalog()

    '''
    pool = mp.Pool(mp.cpu_count()*5/8)
    pool.map(task,quasar_catalog)
    '''
    '''
    # run more mock light curves
    name_list = quasar_catalog["name"].tolist()
    strong_cands = np.genfromtxt("statistics/strong_candidates.csv",names=True,delimiter=",",dtype=None)
    index = []
    for strong_cand in strong_cands:
        indice = name_list.index(strong_cand["name"])
        index.append(indice)
    pool = mp.Pool(mp.cpu_count()/6)
    pool.map(task,quasar_catalog[index])
    '''


    #analysis.analyze_lightcurve(quasar_catalog)

    #analysis.test = True
    #analysis.analyze_lightcurve(quasar_catalog[226])
    #analysis.plot_periodogram_and_lightcurve(quasar_catalog[505])
    # 18,86,153,211,322,356,393,414,451,473,478,483,505,594
    # 18,86,155,214,325,359,396,417,454,476,481,486,508,597

    for i in [396]:
    #for i in [396,226,259]:
        analysis = main.analysis()
        #analysis.large_mock = True
        #analysis.test = True
        #analysis.analyze_lightcurve(quasar_catalog[i])
        analysis.plot_periodogram_and_lightcurve(quasar_catalog[i])
        #analysis.generate_ACF_results(quasar_catalog[i])
    '''
    #for i in 18,86,155,214,325,359,396,417,454,476,481,486,508,597:
        name = quasar_catalog[i]["name"]
        print name
        for band in ["g","r","i","z"]:
            print analysis.abc(name,band)
    '''

    #    analysis.generate_ACF_results(quasar_catalog[i])

    stop = timeit.default_timer()
    useful_funcs.print_and_write("log_period_analysis",\
                                 "Execution Time:"+str((stop-start)/60.)+" mins")
