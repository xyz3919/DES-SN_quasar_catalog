#!/usr/bin/env python
# 
import numpy as np
from lightcurve import main
from lightcurve import plot
import useful_funcs


if __name__ == '__main__':


    lc = main.lc()
    lc_info = lc.read_lc_info()
    print ("Parent_sample: " + str(len(lc_info)))

    # plot epoch distribution
    number_epochs_DES = plot.plot(2,2,figsize=(8,6),sharex=True, sharey=True)
    number_epochs_SDSS = plot.plot(2,2,figsize=(8,6),sharex=True, sharey=True)
    for band in lc.band_list:
        number_epochs_DES.plot_histogram(lc_info["N_DES_"+band],band,dashed=True,survey='DES')
        number_epochs_SDSS.plot_histogram(lc_info["N_SDSS_"+band],band,dashed=True,survey='SDSS')


    # make clean sample (epoch_DES > 50, epoch_SDSS > 30, > 2 band)
    clean_sample = lc.get_clean_sample(lc_info,N_DES=50,N_SDSS=30,N_band=2)

    for band in lc.band_list:
        number_epochs_DES.plot_histogram(clean_sample["N_DES_"+band],band,survey='DES')
        number_epochs_SDSS.plot_histogram(clean_sample["N_SDSS_"+band],band,survey='SDSS')


    print ("Saving the DES number of epochs plot at 'plot/DES_epochs.eps'")
    print ("Saving the SDSS number of epochs plot at 'plot/SDSS_epochs.eps'")


    number_epochs_DES.savefig("plot/","DES_epochs.eps",r"DES",xlabel="Number of epochs",ylabel="Number of quasars")
    number_epochs_SDSS.savefig("plot/","SDSS_epochs.eps",r"SDSS",xlabel="Number of epochs",ylabel="Number of quasars")



    # plot the redshift and mag distribution
    redshift_mag = plot.plot(1,1,figsize=(8,6))
    redshift_mag.plot_redshift_mag(clean_sample["z"],clean_sample["mag_psf_i"])
    redshift_mag.savefig("plot/","redshift_mag.eps",\
                         "",tight_layout=True)

    '''
    lc = main.lc("DES/")
    lc_info = np.genfromtxt(lc.lc_dir+lc.lc_info_file,delimiter=",",\
              skip_header=1,\
              dtype = [("name","|S20"),("ra",float),("dec",float),\
                       ("z",float),("flag_0","|S6"),("flag_1","|S6"),\
                       ("flag_2","|S6"),("flag_3","|S15"),\
                       ("mag_i",float),("spread_model_i",float),\
                       ("spread_model_err_i",float),\
                       ("N_DES_g",int),("N_DES_r",int),("N_DES_i",int),\
                       ("N_DES_z",int),("N_SDSS_g",int),("N_SDSS_r",int),\
                       ("N_SDSS_i",int),("N_SDSS_z",int)])
    print ("Parent_sample: "+str(len(lc_info)))
    N = 0
    clean_sample = np.array([],dtype=lc_info.dtype)
    for row in lc_info:
        N_pass = 0
        for band in lc.band_list:
            if( row["N_DES_"+band] > 50) and (row["N_SDSS_"+band] > 30) \
                and (row["spread_model_i"] < 0.005):
                N_pass = N_pass +1
        if N_pass > 1:
            clean_sample = np.append(clean_sample,row)
    print ("Number of Quasar with Enough epochs: "+str(len(clean_sample)))
    print ("z:"+str(np.median(clean_sample["z"])))
    print ("mag_i:"+str(np.median(clean_sample["mag_i"])))
    print ("N_DES_i:"+str(np.median(clean_sample["N_DES_i"])))
    print ("N_SDSS_i:"+str(np.median(clean_sample["N_SDSS_i"])))

    number_epochs_DES = plot.plot(2,2,figsize=(10,8))
    number_epochs_SDSS = plot.plot(2,2,figsize=(10,8))
    for band in lc.band_list:
        number_epochs_DES.plot_histogram(lc_info["N_DES_"+band],band)
        number_epochs_SDSS.plot_histogram(lc_info["N_SDSS_"+band],band)

    print ("Saving the DES number of epochs plot at 'plot/DES_epochs.png'")
    print ("Saving the SDSS number of epochs plot at 'plot/SDSS_epochs.png'")
    number_epochs_DES.savefig("plot/","DES_epochs.png","DES")
    number_epochs_SDSS.savefig("plot/","SDSS_epochs.png","SDSS")

    np.savetxt(lc.lc_dir+"lc_clean.csv",clean_sample,fmt="%s,"*18+"%s",\
               header=",".join(clean_sample.dtype.names),comments="")

    redshift_mag = plot.plot(1,1,figsize=(8,6))
    redshift_mag.plot_redshift_mag(clean_sample["z"],clean_sample["mag_i"])
    redshift_mag.savefig("plot/","redshift_mag.png",\
                         "",tight_layout=False)

    # check where the quasar from
    in_DR7_DR14 = np.any([clean_sample["flag_0"]==" DR14Q",\
                          clean_sample["flag_1"]=="  DR7Q"],axis=0)
    number_DR7_DR14 = len(clean_sample[in_DR7_DR14])

    print ("Number in SDSS DR7/14:"+str( number_DR7_DR14))
    print clean_sample[np.invert(in_DR7_DR14)]
            
    '''

