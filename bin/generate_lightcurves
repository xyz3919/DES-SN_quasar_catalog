#!/usr/bin/env python
# 
import time
import timeit
from lightcurve import main
import os
from lightcurve import query
import useful_funcs
import sys
import multiprocessing as mp
import traceback

def main_steps(quasar):

    lc = main.lc()
    #save_line = ""
    name = useful_funcs.degtohexname(quasar["ra"],quasar["dec"])
    lc.save_line = lc.save_line+name
    useful_funcs.print_and_write(lc.log,"- "+name+"\n")

    #####################
    #  DES light curves #
    #####################

    lc.set_output_dir(lc.lc_dir+"DES/"+name)

    # query the data from DES database
    SV_Y5_quasars = lc.generate_finalcut_lightcurve(quasar)

    total_quasars = lc.convert_flux_to_mag(SV_Y5_quasars)
    total_quasars.sort(order="mjd_obs")

    # get median magnitude for the quasars without coadd mag
    quasar = lc.fill_coadd_mag_with_median_mag(quasar,total_quasars)

    # record the info for the quasar
    lc.save_line = lc.save_line+","+",".join(map(str,quasar))

    # save DES data
    lc.save_DES_lightcurves(total_quasars)

    #####################
    # SDSS light curves #
    #####################

    lc.set_output_dir(lc.lc_dir+"SDSS/"+name)

    # query the data from SDSS database
    SDSS_quasars = lc.generate_SDSS_lightcurves(quasar)

    # adjust to DES system
    spec = main.spectra()
    for i in range(3):
        try:
            spec.get_SDSS_spectrum(quasar["ra"],quasar["dec"])
            break
        except Exception as error:
            pass
    else:
        raise error
    #spec.get_SDSS_spectrum(quasar["ra"],quasar["dec"])
    mag_diff = spec.mag_SDSS_to_DES(name)

    lc.save_SDSS_lightcurves(SDSS_quasars,mag_diff)

    #################
    # PanSTARRs DR2 #
    #################

    lc.set_output_dir(lc.lc_dir+"PS/"+name)
    lc.generate_and_save_PS_lightcurves(quasar)

    ###########
    # ZTF DR1 #
    ###########

    lc.set_output_dir(lc.lc_dir+"ZTF/"+name)
    lc.generate_and_save_ZTF_lightcurves(quasar)

    #############
    # save info #
    #############

    lc.save_information()

    '''
    # save combined lightcurves

    
    band_list = ["g","r","i","z"]
    output_dir = lc.lc_dir+"combined/"
    useful_funcs.create_dir(output_dir)
    useful_funcs.create_dir(output_dir+name)

    for band in band_list:
        filenames = [lc_SDSS.save_dir+name+"/"+band+".csv",\
                     lc.save_dir+name+"/"+band+".csv"]
        with open(output_dir+name+"/"+band+".csv", 'w') as outfile:
            for fname in filenames:
                if os.path.isfile(fname):
                    with open(fname) as infile:
                        for line in infile.readlines()[1:]:
                            newline = line.replace(","," ")
                            outfile.write(newline)
    ''' 

    return 0

def func(quasar):

    # functions used to feed into multiprocessing 

    try:
        main_steps(quasar)

    except Exception as e:
        traceback.print_exc()
        print quasar
        raise e

    return 0

if __name__ == '__main__':

    start = timeit.default_timer()
    lc = main.lc()

    quasar_catalog = lc.load_quasar_catalog()

    lc.write_header(quasar_catalog)
    quasar_catalog = lc.get_unprocessed_quasars(quasar_catalog)

    for i in range(len(quasar_catalog)):
        main_steps(quasar_catalog[i])

    #pool = mp.Pool(mp.cpu_count()*2/4)
    #pool.map(func,quasar_catalog)
    #func(quasar_catalog[833])
    # 1216,890,833

    stop = timeit.default_timer()
    useful_funcs.print_and_write(lc.log,"Execution Time:"+\
                                 str((stop-start)/60.)+" mins")

